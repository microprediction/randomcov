from randomcov.corrgensutil.nearestcorr import nearest_corr
import numpy as np


def corr_walk(initial_correlation_matrix, steps=100, epsilon=0.01):
    """
    Perform a random walk over correlation matrices by perturbing the current matrix.

    Parameters:
    - C_0: Initial valid correlation matrix (numpy array of shape (N, N)).
    - steps: Number of steps for the random walk.
    - epsilon: Step size for the perturbation.

    Returns:
    - C_walk: A list of correlation matrices generated by the random walk.
    """
    N = initial_correlation_matrix.shape[0]
    C_walk = [initial_correlation_matrix]

    for _ in range(steps):
        # Generate a random symmetric perturbation matrix
        perturbation = epsilon * np.random.randn(N, N)
        perturbation = (perturbation + perturbation.T) / 2  # Make it symmetric

        # Add the perturbation to the current correlation matrix
        C_new = C_walk[-1] + perturbation

        # Project the new matrix back to the space of valid correlation matrices
        C_new_projected = nearest_corr(C_new)

        # Append the new correlation matrix to the walk
        C_walk.append(C_new_projected)

    return C_walk

# Example usage:
if __name__ == "__main__":
    # Initial correlation matrix (identity matrix)
    n = 5
    rho = 0.3
    corr0 = np.eye(n)*(1-rho) + rho*np.ones(n)

    # Perform random walk over correlation matrices
    random_walk = corr_walk(initial_correlation_matrix=corr0, steps=5, epsilon=0.1)

    for i, C in enumerate(random_walk):
        print(f"Step {i} Correlation Matrix:\n{C}\n")
